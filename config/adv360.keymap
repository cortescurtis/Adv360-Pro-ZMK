/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <52 53 65 66 67 68 69 70 35 36 37 38 70 71 7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <35 36 37 38 52 53 65 66 67 68 69 70 0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66>;
            hold-trigger-on-release;
        };

        hmt: hmt {
            compatible = "zmk,behavior-hold-tap";
            label = "HMT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            retro-tap;
            flavor = "balanced";
            require-prior-idle-ms = <175>;
        };

        tml: tml {
            compatible = "zmk,behavior-hold-tap";
            label = "TML";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <53 68 69 70 37 38 70 71 7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75 1 2 3 4 5 6 15 16 17 18 19 20 29 30 31 32 33 34 47 48 49 50 51 61 62 63 64 0 14 28 46 60>;
            hold-trigger-on-release;
        };

        tmr: tmr {
            compatible = "zmk,behavior-hold-tap";
            label = "TMR";
            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <35 36 52 65 66 67 0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 7 8 9 10 11 12 13 21 22 23 24 25 26 27 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75>;
            hold-trigger-on-release;
        };

        lsft_cpwd_cplk: lsft_cpwd_cplk {
            compatible = "zmk,behavior-tap-dance";
            label = "LSFT_CPWD_CPLK";
            #binding-cells = <0>;
            bindings = <&tml LSHFT ESCAPE>, <&caps_word>, <&kp CAPS>;

            tapping-term-ms = <150>;
        };

        rsft_cpwd_cplk: rsft_cpwd_cplk {
            compatible = "zmk,behavior-tap-dance";
            label = "RSFT_CPWD_CPLK";
            #binding-cells = <0>;
            bindings = <&tmr RSHFT ESCAPE>, <&caps_word>, <&kp CAPS>;

            tapping-term-ms = <125>;
        };

        td_lalt_altgr: td_lalt_altgr {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LALT_ALTGR";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&kp RALT>;
        };

        td_lctrl_lmeh: td_lctrl_lmeh {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LCTRL_LMEH";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL>, <&kp LC(LA(LEFT_SHIFT))>;
        };

        td_rctrl_rmeh: td_rctrl_rmeh {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RCTRL_RMEH";
            #binding-cells = <0>;
            bindings = <&kp RCTRL>, <&kp RA(RC(RSHFT))>;
        };

        td_lsuper_lhyper: td_lsuper_lhyper {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LSUPER_LHYPER";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LA(LC(LG(LSHFT)))>;
        };

        td_rsuper_rhyper: td_rsuper_rhyper {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RSUPER_RHYPER";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_GUI>, <&kp RA(RC(RG(RIGHT_SHIFT)))>;
        };

        td_tml_alt: td_tml_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TML_ALT";
            #binding-cells = <0>;
            bindings = <&tml LALT TAB>, <&kp RALT>;

            tapping-term-ms = <125>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-tap-dance";
            label = "NEW_BEHAVIOR";
            #binding-cells = <0>;
            bindings = <&tmr RSHFT ESCAPE>, <&caps_word>, <&kp CAPS>;
        };
    };

    combos {
        compatible = "zmk,combos";

        RetEngrammer {
            bindings = <&tog 0>;
            key-positions = <34 39>;
            layers = <0 1 2 3 4>;
        };

        ToGaming {
            bindings = <&tog 4>;
            key-positions = <20 21>;
        };

        double_shift {
            bindings = <&kp RS(LEFT_SHIFT)>;
            key-positions = <35 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Engrammer {
            bindings = <
&kp LEFT_BRACKET  &kp N7    &kp N5     &kp N3     &kp N1   &kp N9            &kp LPAR                                                                               &kp RPAR       &kp N0         &kp N2    &kp N4    &kp N6  &kp N8     &kp RIGHT_BRACKET
&kp AT            &kp B     &kp Y      &kp O      &kp U    &kp SINGLE_QUOTE  &kp PLUS                                                                               &kp AMPERSAND  &kp SEMICOLON  &kp L     &kp D     &kp W   &kp V      &kp Z
&kp HASH          &kp C     &kp I      &kp E      &kp A    &kp COMMA         &kp EQUAL      &mt LSHFT ESC  &td_lctrl_lmeh         &td_rctrl_rmeh     &mt RSHFT ESC  &kp EXCL       &kp DOT        &kp H     &kp T     &kp S   &kp N      &kp Q
&lsft_cpwd_cplk   &kp G     &kp X      &kp J      &kp K    &kp MINUS                                       &td_tml_alt            &td_tml_alt                                      &kp SLASH      &kp R     &kp M     &kp F   &kp P      &rsft_cpwd_cplk
&lt 3 GRAVE       &kp HOME  &kp PG_DN  &kp PG_UP  &kp END                    &kp BACKSPACE  &lt 1 DELETE   &td_lsuper_lhyper      &td_rsuper_rhyper  &lt 2 RET      &kp SPACE                     &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &lt 3 BSLH
            >;
        };

        FuncNumPad {
            bindings = <
&kp F13  &kp F7  &kp F5     &kp F3         &kp F1         &kp F9          &kp F11                                                     &kp F12               &kp F10     &kp F2           &kp F4           &kp F6           &kp F8        &kp F14
&none    &none   &none      &kp RIGHT_ALT  &kp LEFT_ALT   &kp LEFT_GUI    &kp LA(LC(LG(LSHFT)))                                       &kp LEFT_PARENTHESIS  &kp RPAR    &kp KP_N7        &kp KP_N8        &kp KP_NUMBER_9  &kp KP_MINUS  &kp KP_DIVIDE
&none    &none   &kp SPACE  &kp TAB        &kp BACKSPACE  &kp LEFT_SHIFT  &kp LA(LC(LSHFT))      &trans  &trans      &trans  &trans   &kp LT                &kp GT      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &kp KP_MULTIPLY
&none    &none   &kp ENTER  &kp LS(TAB)    &kp DEL        &kp LCTRL                                      &trans      &trans                                 &kp DOLLAR  &kp KP_N1        &kp KP_N2        &kp KP_N3        &kp KP_ENTER  &kp PERCENT
&none    &none   &none      &none          &none                          &trans                 &trans  &trans      &trans  &kp DOT  &kp KP_N0                         &kp KP_EQUAL     &kp KP_NUMBER_0  &kp KP_DOT       &kp KP_ENTER  &kp KP_NUMLOCK
            >;
        };

        Symbols {
            bindings = <
&kp PERCENT      &kp GRAVE       &kp LPAR          &kp RPAR           &kp SEMI          &kp COMMA     &kp COLON                                                     &none                  &none             &none          &none          &none      &none  &none
&kp EXCLAMATION  &kp LEFT_BRACE  &kp SQT           &kp DOUBLE_QUOTES  &kp RIGHT_BRACE   &kp QUESTION  &kp DOT                                                       &kp LG(LC(LA(LSHFT)))  &kp LGUI          &kp LEFT_ALT   &kp RIGHT_ALT  &none      &none  &none
&kp HASH         &kp CARET       &kp EQUAL         &kp UNDERSCORE     &kp DOLLAR        &kp ASTERISK  &kp BACKSLASH  &kp BACKSLASH  &kp ASTERISK      &none  &none  &kp LC(LA(LSHFT))      &kp LEFT_SHIFT    &kp BACKSPACE  &kp TAB        &kp SPACE  &none  &none
&kp AT_SIGN      &kp LESS_THAN   &kp PIPE          &kp MINUS          &kp GREATER_THAN  &kp SLASH                                   &kp PERIOD        &none                                &kp LEFT_CONTROL  &kp DEL        &kp LS(TAB)    &kp ENTER  &none  &none
&kp TILDE        &kp AMPERSAND   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PLUS                        &kp COLON      &kp SEMICOLON  &kp PERCENT       &none  &none  &trans                                   &none          &none          &none      &none  &none
            >;
        };

        System {
            bindings = <
&none  &none  &none       &none       &none       &none  &none                                                                         &trans        &none  &none       &none              &none         &none  &none
&none  &none  &bl BL_TOG  &bl BL_DEC  &bl BL_INC  &none  &bootloader                                                                   &bootloader   &none  &none       &none              &none         &none  &none
&none  &none  &none       &none       &none       &none  &none         &bt BT_CLR    &bt BT_CLR_ALL      &bt BT_CLR_ALL  &bt BT_CLR    &none         &none  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &none  &none
&none  &none  &none       &none       &none       &none                              &none               &none                                       &none  &kp C_PLAY  &kp C_PREV         &kp C_NEXT    &none  &none
&none  &none  &none       &none       &none              &bt BT_SEL 0  &bt BT_SEL 2  &bt BT_SEL 4        &none           &bt BT_SEL 3  &bt BT_SEL 1         &none       &none              &none         &none  &none
            >;
        };

        Gaming {
            bindings = <
&kp N6  &kp N1     &kp N2  &kp N3  &kp N4  &kp N5  &kp MINUS                                                               &kp EQUAL  &kp N6  &kp N7    &kp N8     &kp N9   &kp N0     &kp BSPC
&kp N7  &kp TAB    &kp Q   &kp W   &kp E   &kp R   &kp T                                                                   &kp HOME   &kp Y   &kp U     &kp I      &kp O    &kp P      &kp BSLH
&kp N8  &kp LCTRL  &kp A   &kp S   &kp D   &kp F   &kp G      &kp ESC    &kp LGUI               &kp RGUI       &kp GRAVE   &kp END    &kp H   &kp J     &kp K      &kp L    &kp SEMI   &kp RCTRL
&kp N9  &kp LSHFT  &kp Z   &kp X   &kp C   &kp V                         &kp LEFT_BRACKET       &kp PG_UP                             &kp N   &kp M     &kp COMMA  &kp DOT  &kp FSLH   &kp RSHFT
&kp N0  &kp LALT   &kp J   &kp M   &kp B           &kp SPACE  &kp ENTER  &kp RIGHT_BRACKET      &kp PAGE_DOWN  &kp DELETE  &kp BSPC           &kp LEFT  &kp DOWN   &kp UP   &kp RIGHT  &kp RALT
            >;
        };
    };
};
